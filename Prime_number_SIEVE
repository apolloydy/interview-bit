vector<int> Solution::sieve(int A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    vector<int> res;
    if (A<2) return res;
    res.push_back(2);
    long long n = A/2;
    if ((A&1) == 0) {
        // if A is even n*2= A+1 
        // it is out of range.
        n--;
    }
    vector<char> table (n+1);
    //Map from real number to talbe
    // num/2 --> table id
    // table id * 2 + 1 ---> number
    for (long long i = 1; i<=n; i++) {
        if (table[i] == false) {
            res.push_back(i*2+1);
            
            // gap = real_number * 2 / 2 = real_number = i*2+1
            long long gap = i*2+1;
            
            // non-prime smaller than p^2 must already been 
            // eliminated. proof:
            // If there is one it must be num = p * x, where x<p;
            // So num if true already when ding x for prime fector
            // of x;
            for (long long j = gap*gap/2; j <= n; j+=gap) {
                table[j] = true;
            }
        }
    }
    return res;
}
